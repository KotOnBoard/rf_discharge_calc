	Following documentation specifies capabilities and ways to use Rf_Discharge.
Rf-Discharge is a python script for numerical calculations and visualisation of plasma parameters.


	1. Architecture

Program consists of 3 main scripts interacting with each other's output sequentially.

	calc.py - core module for calculating operating point of plasma discharge based on input parameters.
This module can comprehend only static non-iterator parameters of float or string.
Recieves static array of initial parametes and outputs Pandas Database with output parametes of plasm discharge.

	scanner.py - module for parsing input data and feeding it into calc.py iteratively.
It's main function is to scan through n-dimensional array of input parameters and turning them in static combinations.
Feeds array of float & string in unified dictionary directly into calc.py and adds array of output parameters into Excel table.

	plotmaker.py - module for accessing Excel table generated by scanner.py and plotting the results.
Based on Excel table visualises relations between input and output parameters.


	2. Module use and interaction.

	Current version of script is controlled by plain text files and terminal calls or series of them in batch file.
All input files should be placed within \conf folder (exception: Excel table made by scanner.py for plotmaker.py).
	The results of this program are Excel tables with wide array of numerically calculated parameters and PNG plots.
Output files are placed in \output directory or it's subdirectories if specified in argument.

	2.1. Calc
	
	This core module is not intended for direct access.
As input it recieves dictionary of float or str parameters as following:
{
	'gas': %, # atmosphere of plasma discharge: 'He', 'Ne' or 'Ar'.
	'l': %, # length of discharge gap in meters.
	'R': %, # radius of circular cathode in meters.
	'f': %, # frequency of RF volatage in MHz.
	'Assy': %, # Asymmetry coefficient
	'p': %, # Pressure within discharge cahamber.
	'Pwr': %, # Power that will be absorbed by plasma in Watts. 
	*'Vrf': %, # Amplitude of RF voltage on the electrodes. 
		*Can replace Pwr and override Vrf calculation. 	
			If both Vrf & Pwr are specified, Pwr takes priority.
}
Full array of output parameters can be looked up in Example.xlsx.

	
	2.2. Scanner

	Currently this module is controlled only by text file and accepts two required positional arguments:
>>> python scanner.py <confname>.<extension> <Tablename>

	<confname>.<extension> - is supposed to be a path to a plain text file with valid initial parameters.
example: conf.json5

	Program should be able to comprehend any plain text format: .txt, .json, .json5 and others.
	Configuration file should be inside \conf, or in it's subdirectories 
example: to acces file in \conf\subdir\conf.txt pass:
>>> python scanner.py subdir/conf.txt <Tablename>

	<Tablename> - is a name of output excel table, automatically placed in \output folder.
	As the fite type can be only .xlsx, this argument should be specified without extension
example: Sample
	
	If file supposed to be placed in subdirectory of \output, you can specify it in this argument as following
example: to place output file by name Sample1.xlsx in path \output\subdir\Sample.xlsx pass:
>>> python scanner.py subdir/Sample1

	As two files with the same name can't exist in the same folder, if the exact same name is passed it's replased by:
	\output\<name>_<number of files with that name>
example: Sample_1, Sample_2, etc.


	2.2.1 Confname structure

	Example of valid input parameters and syntaxis is shown in 2.1.

	The differece from calc.py is that this module can accept iterator types as parameters:
Example 1:
>>> 'gas': ['He','Ne','Ar'],
	
	Multiple parameters, when enclosed in sqare brackets, are considered a list. 
Scanner will parse any number of lists and feed every linear combination of parameters in lists to calc.py.
Every output of calc.py is then added to Excel table.

Example 2:
>>> 'p': 'range(1,10,0.5)'

	If the list of parameters to be itrated on is too long, it's way easier to specify it as a range.
When passed as 'range(<a>,<b>,<c>)' this, program will automatically constuct a list from <a> to <b> with a step of <c>.
Note that <b> is NOT included in constructed list and the value MUST be enclosed in '' as shown.

	Word "range" and brackets actually can be replaced by any other or thown out entirely: 
example: 'asd[1,10,1]', '{4,14,2}', '1,10,0.5'
	
	The important part is that it's value is a string and includes ',' between 3 numbers <a>, <b>, <c>.


	2.3. Plotmaker

	Plotmaker recieves no positional arguments, only keyword arguments for user convinience.

Arguments:
	--tablename (--t) : string
		Name of .xlsx table to use when plotting relations.

	--filename (--f) : path
		Name and extension of configuration file, specifying which relations to plot.

	--construct (--c) : list
		If not configurated by text file, a list of relations can be passed to plot them.

	--dim (--d) : 2 or 3 (default=2)
		Dimensions of plots: relation of one output value to one input value or to two input values.

	--shared (--s) : None, x or y (default=None)
		Defines if any of the axis of plots are shared.

	--layout (--l) : {'constrained', 'compressed', 'tight', 'none' or None}, (default='tight')
		Specifies what type of matplotlib layout will be used in a figure.

	--out (--o) : Name or Path without extension
		Changes name and/or subdirectory of output PNG file.

	-show (-s) : Switch
		If passed, shows resulting plot in separate window (pauses terminal untill plot window closed)

	-filterby (-f) : list
		Clears input table from any unwanted values to reduce the dimensions of input data.

	-trans (-t) : boolean (default=False)
		Transposes tiling of multiple plots on one figure.

	-log (-l) : x, y or xy
		Makes specified axis of the plots to be logarithmic.
	
